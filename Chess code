class Piece:
    def __init__(self, color):
        self.color = color

    def __repr__(self):
        return self.color

class Pawn(Piece):
    def __init__(self, color):
        super().__init__(color)

    def __repr__(self):
        return self.color + "P"

class Knight(Piece):
    def __init__(self, color):
        super().__init__(color)

    def __repr__(self):
        return self.color + "N"

class Bishop(Piece):
    def __init__(self, color):
        super().__init__(color)

    def __repr__(self):
        return self.color + "B"

class Rook(Piece):
    def __init__(self, color):
        super().__init__(color)

    def __repr__(self):
        return self.color + "R"

class Queen(Piece):
    def __init__(self, color):
        super().__init__(color)

    def __repr__(self):
        return self.color + "Q"

class King(Piece):
    def __init__(self, color):
        super().__init__(color)

    def __repr__(self):
        return self.color + "K"

class ChessBoard:
    def __init__(self):
        self.board = [
            [Rook("W"), Knight("W"), Bishop("W"), Queen("W"), King("W"), Bishop("W"), Knight("W"), Rook("W")],
            [Pawn("W"), Pawn("W"), Pawn("W"), Pawn("W"), Pawn("W"), Pawn("W"), Pawn("W"), Pawn("W")],
            [None, None, None, None, None, None, None, None],
            [None, None, None, None, None, None, None, None],
            [None, None, None, None, None, None, None, None],
            [None, None, None, None, None, None, None, None],
            [Pawn("B"), Pawn("B"), Pawn("B"), Pawn("B"), Pawn("B"), Pawn("B"), Pawn("B"), Pawn("B")],
            [Rook("B"), Knight("B"), Bishop("B"), Queen("B"), King("B"), Bishop("B"), Knight("B"), Rook("B")]
        ]

    def move_piece(self, from_x, from_y, to_x, to_y):
        self.board[to_y][to_x] = self.board[from_y][from_x]
        self.board[from_y][from_x] = None

    def display(self):
        for row in self.board:
            print(" ".join([str(col) if col is not None else "-" for col in row]))

board = ChessBoard()
board.display()
board.move_piece(0, 0, 2, 2)
board.display()
